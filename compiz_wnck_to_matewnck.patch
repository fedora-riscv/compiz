diff -uprN compiz-0.8.8-orig/configure.ac compiz-0.8.8/configure.ac
--- compiz-0.8.8-orig/configure.ac	2013-04-18 21:13:02.899829000 +0200
+++ compiz-0.8.8/configure.ac	2013-04-18 21:23:41.241315656 +0200
@@ -239,7 +239,7 @@ if test "x$use_gtk" = "xyes"; then
 		    xrender >= 0.8.4  \
 		    xcursor \
 		    gtk+-2.0 >= 2.8.0 \
-		    libwnck-1.0	      \
+		    libmatewnck	      \
 		    pangocairo,
 		    [use_gtk=yes], [use_gtk=no])
   if test "x$use_gtk" = "xyes"; then
@@ -247,15 +247,15 @@ if test "x$use_gtk" = "xyes"; then
     save_LIBS="$LIBS"
     CFLAGS="$CFLAGS $GTK_WINDOW_DECORATOR_CFLAGS"
     LIBS="$LIBS $GTK_WINDOW_DECORATOR_LIBS"
-    AC_CHECK_FUNCS(wnck_window_has_name)
+    AC_CHECK_FUNCS(matewnck_window_has_name)
     CFLAGS="$save_CFLAGS"
     LIBS="$save_LIBS"
 
-    PKG_CHECK_EXISTS(libwnck-1.0 >= 2.18.1,
-		     [have_libwnck_2_18_1=yes], [have_libwnck_2_18_1=no])
+    PKG_CHECK_EXISTS(libmatewnck-1.0 >= 2.18.1,
+		     [have_libmatewnck_2_18_1=yes], [have_libmatewnck_2_18_1=no])
 
-	PKG_CHECK_EXISTS(libwnck-1.0 >= 2.19.4,
-		     [have_libwnck_2_19_4=yes], [have_libwnck_2_19_4=no])
+	PKG_CHECK_EXISTS(libmatewnck-1.0 >= 2.19.4,
+		     [have_libmatewnck_2_19_4=yes], [have_libmatewnck_2_19_4=no])
 
     if test "x$use_marco" = "xyes"; then
       PKG_CHECK_MODULES(MARCO, libmarco-private,
@@ -273,13 +273,13 @@ fi
 AM_CONDITIONAL(USE_GTK, test "x$use_gtk" = "xyes")
 if test "$use_gtk" = yes; then
   AC_DEFINE(USE_GTK, 1, [Build gtk window decorator])
-  if test "$have_libwnck_2_18_1" = yes; then
-    AC_DEFINE(HAVE_LIBWNCK_2_18_1, 1,
-	      [Define to 1 if libwnck version >= 2_18_1])
+  if test "$have_libmatewnck_2_18_1" = yes; then
+    AC_DEFINE(HAVE_LIBMATEWNCK_2_18_1, 1,
+	      [Define to 1 if libmatewnck version >= 2_18_1])
   fi
-  if test "$have_libwnck_2_19_4" = yes; then
-    AC_DEFINE(HAVE_LIBWNCK_2_19_4, 1,
-	      [Define to 1 if libwnck version >= 2_19_4])
+  if test "$have_libmatewnck_2_19_4" = yes; then
+    AC_DEFINE(HAVE_LIBMATEWNCK_2_19_4, 1,
+	      [Define to 1 if libmatewnck version >= 2_19_4])
   fi
 fi
 
diff -uprN compiz-0.8.8-orig/configure.ac.comiz_mate_fork compiz-0.8.8/configure.ac.comiz_mate_fork
--- compiz-0.8.8-orig/configure.ac.comiz_mate_fork	2011-03-30 11:22:47.000000000 +0200
+++ compiz-0.8.8/configure.ac.comiz_mate_fork	2013-04-18 21:23:41.163314864 +0200
@@ -302,7 +302,7 @@ if test "x$use_gtk" = "xyes"; then
   PKG_CHECK_MODULES(GTK_WINDOW_DECORATOR,
 		    xrender >= 0.8.4  \
 		    gtk+-2.0 >= 2.8.0 \
-		    libwnck-1.0	      \
+		    libmatewnck-1.0	      \
 		    pangocairo,
 		    [use_gtk=yes], [use_gtk=no])
   if test "x$use_gtk" = "xyes"; then
@@ -310,15 +310,15 @@ if test "x$use_gtk" = "xyes"; then
     save_LIBS="$LIBS"
     CFLAGS="$CFLAGS $GTK_WINDOW_DECORATOR_CFLAGS"
     LIBS="$LIBS $GTK_WINDOW_DECORATOR_LIBS"
-    AC_CHECK_FUNCS(wnck_window_has_name)
+    AC_CHECK_FUNCS(matewnck_window_has_name)
     CFLAGS="$save_CFLAGS"
     LIBS="$save_LIBS"
 
-    PKG_CHECK_EXISTS(libwnck-1.0 >= 2.18.1,
-		     [have_libwnck_2_18_1=yes], [have_libwnck_2_18_1=no])
+    PKG_CHECK_EXISTS(libmatewnck-1.0 >= 2.18.1,
+		     [have_libmatewnck_2_18_1=yes], [have_libmatewnck_2_18_1=no])
 
-	PKG_CHECK_EXISTS(libwnck-1.0 >= 2.19.4,
-		     [have_libwnck_2_19_4=yes], [have_libwnck_2_19_4=no])
+	PKG_CHECK_EXISTS(libmatewnck-1.0 >= 2.19.4,
+		     [have_libmatewnck_2_19_4=yes], [have_libmatewnck_2_19_4=no])
 
     if test "x$use_metacity" = "xyes"; then
       PKG_CHECK_MODULES(METACITY, libmetacity-private,
@@ -361,13 +361,13 @@ AC_SUBST(keybindingsdir)
 AM_CONDITIONAL(USE_GTK, test "x$use_gtk" = "xyes")
 if test "$use_gtk" = yes; then
   AC_DEFINE(USE_GTK, 1, [Build gtk window decorator])
-  if test "$have_libwnck_2_18_1" = yes; then
-    AC_DEFINE(HAVE_LIBWNCK_2_18_1, 1,
-	      [Define to 1 if libwnck version >= 2_18_1])
+  if test "$have_libmatewnck_2_18_1" = yes; then
+    AC_DEFINE(HAVE_LIBMATEWNCK_2_18_1, 1,
+	      [Define to 1 if libmatewnck version >= 2_18_1])
   fi
-  if test "$have_libwnck_2_19_4" = yes; then
-    AC_DEFINE(HAVE_LIBWNCK_2_19_4, 1,
-	      [Define to 1 if libwnck version >= 2_19_4])
+  if test "$have_libmatewnck_2_19_4" = yes; then
+    AC_DEFINE(HAVE_LIBMATEWNCK_2_19_4, 1,
+	      [Define to 1 if libmatewnck version >= 2_19_4])
   fi
 fi
 
diff -uprN compiz-0.8.8-orig/gtk/window-decorator/gtk-window-decorator.c compiz-0.8.8/gtk/window-decorator/gtk-window-decorator.c
--- compiz-0.8.8-orig/gtk/window-decorator/gtk-window-decorator.c	2013-04-18 21:13:02.905829000 +0200
+++ compiz-0.8.8/gtk/window-decorator/gtk-window-decorator.c	2013-04-18 21:23:40.292306019 +0200
@@ -36,12 +36,12 @@
 #include <gdk/gdkx.h>
 #include <glib/gi18n.h>
 
-#define WNCK_I_KNOW_THIS_IS_UNSTABLE
-#include <libwnck/libwnck.h>
-#include <libwnck/window-action-menu.h>
+#define MATEWNCK_I_KNOW_THIS_IS_UNSTABLE
+#include <libmatewnck/libmatewnck.h>
+#include <libmatewnck/window-action-menu.h>
 
-#ifndef HAVE_LIBWNCK_2_19_4
-#define wnck_window_get_client_window_geometry wnck_window_get_geometry
+#ifndef HAVE_LIBMATEWNCK_2_19_4
+#define matewnck_window_get_client_window_geometry matewnck_window_get_geometry
 #endif
 
 #include <cairo.h>
@@ -390,8 +390,8 @@ typedef struct _decor {
     cairo_pattern_t   *icon;
     GdkPixmap	      *icon_pixmap;
     GdkPixbuf	      *icon_pixbuf;
-    WnckWindowState   state;
-    WnckWindowActions actions;
+    MatewnckWindowState   state;
+    MatewnckWindowActions actions;
     XID		      prop_xid;
     GtkWidget	      *force_quit_dialog;
     void	      (*draw) (struct _decor *d);
@@ -423,7 +423,7 @@ gboolean (*theme_get_button_position)
 					     gint    *w,
 					     gint    *h);
 
-typedef void (*event_callback) (WnckWindow *win, XEvent *event);
+typedef void (*event_callback) (MatewnckWindow *win, XEvent *event);
 
 static char *program_name;
 
@@ -938,8 +938,8 @@ draw_window_decoration (decor_t *d)
 
     style = gtk_widget_get_style (style_window);
 
-    if (d->state & (WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY |
-		    WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY))
+    if (d->state & (MATEWNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY |
+		    MATEWNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY))
 	corners = 0;
 
     color.r = style->bg[GTK_STATE_NORMAL].red   / 65535.0;
@@ -1157,7 +1157,7 @@ draw_window_decoration (decor_t *d)
 
     button_x = d->width - d->context->right_space - 13;
 
-    if (d->actions & WNCK_WINDOW_ACTION_CLOSE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_CLOSE)
     {
 	button_state_offsets (button_x,
 			      y1 - 3.0 + titlebar_height / 2,
@@ -1183,7 +1183,7 @@ draw_window_decoration (decor_t *d)
 	}
     }
 
-    if (d->actions & WNCK_WINDOW_ACTION_MAXIMIZE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_MAXIMIZE)
     {
 	button_state_offsets (button_x,
 			      y1 - 3.0 + titlebar_height / 2,
@@ -1200,8 +1200,8 @@ draw_window_decoration (decor_t *d)
 					      STROKE_ALPHA);
 	    cairo_move_to (cr, x, y);
 
-	    if (d->state & (WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY |
-			    WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY))
+	    if (d->state & (MATEWNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY |
+			    MATEWNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY))
 		draw_unmax_button (d, cr, 4.0);
 	    else
 		draw_max_button (d, cr, 4.0);
@@ -1216,8 +1216,8 @@ draw_window_decoration (decor_t *d)
 					      alpha * 0.75);
 	    cairo_move_to (cr, x, y);
 
-	    if (d->state & (WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY |
-			    WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY))
+	    if (d->state & (MATEWNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY |
+			    MATEWNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY))
 		draw_unmax_button (d, cr, 4.0);
 	    else
 		draw_max_button (d, cr, 4.0);
@@ -1226,7 +1226,7 @@ draw_window_decoration (decor_t *d)
 	}
     }
 
-    if (d->actions & WNCK_WINDOW_ACTION_MINIMIZE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_MINIMIZE)
     {
 	button_state_offsets (button_x,
 			      y1 - 3.0 + titlebar_height / 2,
@@ -1717,53 +1717,53 @@ meta_get_decoration_geometry (decor_t		*
 
     *flags = 0;
 
-    if (d->actions & WNCK_WINDOW_ACTION_CLOSE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_CLOSE)
 	*flags |= META_FRAME_ALLOWS_DELETE;
 
-    if (d->actions & WNCK_WINDOW_ACTION_MINIMIZE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_MINIMIZE)
 	*flags |= META_FRAME_ALLOWS_MINIMIZE;
 
-    if (d->actions & WNCK_WINDOW_ACTION_MAXIMIZE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_MAXIMIZE)
 	*flags |= META_FRAME_ALLOWS_MAXIMIZE;
 
     *flags |= META_FRAME_ALLOWS_MENU;
 
-    if (d->actions & WNCK_WINDOW_ACTION_RESIZE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_RESIZE)
     {
-	if (!(d->state & WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY))
+	if (!(d->state & MATEWNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY))
 	    *flags |= META_FRAME_ALLOWS_VERTICAL_RESIZE;
-	if (!(d->state & WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY))
+	if (!(d->state & MATEWNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY))
 	    *flags |= META_FRAME_ALLOWS_HORIZONTAL_RESIZE;
     }
 
-    if (d->actions & WNCK_WINDOW_ACTION_MOVE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_MOVE)
 	*flags |= META_FRAME_ALLOWS_MOVE;
 
-    if (d->actions & WNCK_WINDOW_ACTION_MAXIMIZE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_MAXIMIZE)
 	*flags |= META_FRAME_ALLOWS_MAXIMIZE;
 
-    if (d->actions & WNCK_WINDOW_ACTION_SHADE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_SHADE)
 	*flags |= META_FRAME_ALLOWS_SHADE;
 
     if (d->active)
 	*flags |= META_FRAME_HAS_FOCUS;
 
-#define META_MAXIMIZED (WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY | \
-			WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY)
+#define META_MAXIMIZED (MATEWNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY | \
+			MATEWNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY)
 
     if ((d->state & META_MAXIMIZED) == META_MAXIMIZED)
 	*flags |= META_FRAME_MAXIMIZED;
 
-    if (d->state & WNCK_WINDOW_STATE_STICKY)
+    if (d->state & MATEWNCK_WINDOW_STATE_STICKY)
 	*flags |= META_FRAME_STUCK;
 
-    if (d->state & WNCK_WINDOW_STATE_FULLSCREEN)
+    if (d->state & MATEWNCK_WINDOW_STATE_FULLSCREEN)
 	*flags |= META_FRAME_FULLSCREEN;
 
-    if (d->state & WNCK_WINDOW_STATE_SHADED)
+    if (d->state & MATEWNCK_WINDOW_STATE_SHADED)
 	*flags |= META_FRAME_SHADED;
 
-    if (d->state & WNCK_WINDOW_STATE_ABOVE)
+    if (d->state & MATEWNCK_WINDOW_STATE_ABOVE)
 	*flags |= META_FRAME_ABOVE;
 
     meta_theme_get_frame_borders (theme,
@@ -2693,7 +2693,7 @@ get_event_window_position (decor_t *d,
     *y = pos[i][j].y + pos[i][j].yh * height + pos[i][j].yth *
 	(titlebar_height - 17);
 
-    if ((d->state & WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY) &&
+    if ((d->state & MATEWNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY) &&
 	(j == 0 || j == 2))
     {
 	*w = 0;
@@ -2703,7 +2703,7 @@ get_event_window_position (decor_t *d,
 	*w = pos[i][j].w + pos[i][j].ww * width;
     }
 
-    if ((d->state & WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY) &&
+    if ((d->state & MATEWNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY) &&
 	(i == 0 || i == 2))
     {
 	*h = 0;
@@ -2991,7 +2991,7 @@ meta_get_button_position (decor_t *d,
 #endif
 
 static void
-update_event_windows (WnckWindow *win)
+update_event_windows (MatewnckWindow *win)
 {
     Display *xdisplay;
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -3001,9 +3001,9 @@ update_event_windows (WnckWindow *win)
 
     xdisplay = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
 
-    wnck_window_get_client_window_geometry (win, &x0, &y0, &width, &height);
+    matewnck_window_get_client_window_geometry (win, &x0, &y0, &width, &height);
 
-    if (d->state & WNCK_WINDOW_STATE_SHADED)
+    if (d->state & MATEWNCK_WINDOW_STATE_SHADED)
     {
 	height = 0;
 	k = l = 1;
@@ -3020,17 +3020,17 @@ update_event_windows (WnckWindow *win)
     {
 	static guint event_window_actions[3][3] = {
 	    {
-		WNCK_WINDOW_ACTION_RESIZE,
-		WNCK_WINDOW_ACTION_RESIZE,
-		WNCK_WINDOW_ACTION_RESIZE
+		MATEWNCK_WINDOW_ACTION_RESIZE,
+		MATEWNCK_WINDOW_ACTION_RESIZE,
+		MATEWNCK_WINDOW_ACTION_RESIZE
 	    }, {
-		WNCK_WINDOW_ACTION_RESIZE,
-		WNCK_WINDOW_ACTION_MOVE,
-		WNCK_WINDOW_ACTION_RESIZE
+		MATEWNCK_WINDOW_ACTION_RESIZE,
+		MATEWNCK_WINDOW_ACTION_MOVE,
+		MATEWNCK_WINDOW_ACTION_RESIZE
 	    }, {
-		WNCK_WINDOW_ACTION_RESIZE,
-		WNCK_WINDOW_ACTION_RESIZE,
-		WNCK_WINDOW_ACTION_RESIZE
+		MATEWNCK_WINDOW_ACTION_RESIZE,
+		MATEWNCK_WINDOW_ACTION_RESIZE,
+		MATEWNCK_WINDOW_ACTION_RESIZE
 	    }
 	};
 
@@ -3063,18 +3063,18 @@ update_event_windows (WnckWindow *win)
     for (i = 0; i < BUTTON_NUM; i++)
     {
 	static guint button_actions[BUTTON_NUM] = {
-	    WNCK_WINDOW_ACTION_CLOSE,
-	    WNCK_WINDOW_ACTION_MAXIMIZE,
-	    WNCK_WINDOW_ACTION_MINIMIZE,
+	    MATEWNCK_WINDOW_ACTION_CLOSE,
+	    MATEWNCK_WINDOW_ACTION_MAXIMIZE,
+	    MATEWNCK_WINDOW_ACTION_MINIMIZE,
 	    0,
-	    WNCK_WINDOW_ACTION_SHADE,
+	    MATEWNCK_WINDOW_ACTION_SHADE,
 
-#ifdef HAVE_LIBWNCK_2_18_1
-	    WNCK_WINDOW_ACTION_ABOVE,
-	    WNCK_WINDOW_ACTION_STICK,
-	    WNCK_WINDOW_ACTION_UNSHADE,
-	    WNCK_WINDOW_ACTION_ABOVE,
-	    WNCK_WINDOW_ACTION_UNSTICK
+#ifdef HAVE_LIBMATEWNCK_2_18_1
+	    MATEWNCK_WINDOW_ACTION_ABOVE,
+	    MATEWNCK_WINDOW_ACTION_STICK,
+	    MATEWNCK_WINDOW_ACTION_UNSHADE,
+	    MATEWNCK_WINDOW_ACTION_ABOVE,
+	    MATEWNCK_WINDOW_ACTION_UNSTICK
 #else
 	    0,
 	    0,
@@ -3106,17 +3106,17 @@ update_event_windows (WnckWindow *win)
     gdk_error_trap_pop ();
 }
 
-#ifdef HAVE_WNCK_WINDOW_HAS_NAME
+#ifdef HAVE_MATEWNCK_WINDOW_HAS_NAME
 static const char *
-wnck_window_get_real_name (WnckWindow *win)
+matewnck_window_get_real_name (MatewnckWindow *win)
 {
-    return wnck_window_has_name (win) ? wnck_window_get_name (win) : NULL;
+    return matewnck_window_has_name (win) ? matewnck_window_get_name (win) : NULL;
 }
-#define wnck_window_get_name wnck_window_get_real_name
+#define matewnck_window_get_name matewnck_window_get_real_name
 #endif
 
 static gint
-max_window_name_width (WnckWindow *win)
+max_window_name_width (MatewnckWindow *win)
 {
     decor_t     *d = g_object_get_data (G_OBJECT (win), "decor");
     const gchar *name;
@@ -3131,7 +3131,7 @@ max_window_name_width (WnckWindow *win)
 	pango_layout_set_wrap (d->layout, PANGO_WRAP_CHAR);
     }
 
-    name = wnck_window_get_name (win);
+    name = matewnck_window_get_name (win);
     if (!name)
 	return 0;
 
@@ -3147,7 +3147,7 @@ max_window_name_width (WnckWindow *win)
 }
 
 static void
-update_window_decoration_name (WnckWindow *win)
+update_window_decoration_name (MatewnckWindow *win)
 {
     decor_t	    *d = g_object_get_data (G_OBJECT (win), "decor");
     const gchar	    *name;
@@ -3160,7 +3160,7 @@ update_window_decoration_name (WnckWindo
 	d->name = NULL;
     }
 
-    name = wnck_window_get_name (win);
+    name = matewnck_window_get_name (win);
     if (name && (name_length = strlen (name)))
     {
 	gint w;
@@ -3173,7 +3173,7 @@ update_window_decoration_name (WnckWindo
 	{
 	    gint width;
 
-	    wnck_window_get_client_window_geometry (win, NULL, NULL, &width,
+	    matewnck_window_get_client_window_geometry (win, NULL, NULL, &width,
 						    NULL);
 
 	    w = width - ICON_SPACE - 2 - d->button_width;
@@ -3207,7 +3207,7 @@ update_window_decoration_name (WnckWindo
 }
 
 static void
-update_window_decoration_icon (WnckWindow *win)
+update_window_decoration_icon (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -3226,7 +3226,7 @@ update_window_decoration_icon (WnckWindo
     if (d->icon_pixbuf)
 	g_object_unref (G_OBJECT (d->icon_pixbuf));
 
-    d->icon_pixbuf = wnck_window_get_mini_icon (win);
+    d->icon_pixbuf = matewnck_window_get_mini_icon (win);
     if (d->icon_pixbuf)
     {
 	cairo_t	*cr;
@@ -3244,19 +3244,19 @@ update_window_decoration_icon (WnckWindo
 }
 
 static void
-update_window_decoration_state (WnckWindow *win)
+update_window_decoration_state (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
-    d->state = wnck_window_get_state (win);
+    d->state = matewnck_window_get_state (win);
 }
 
 static void
-update_window_decoration_actions (WnckWindow *win)
+update_window_decoration_actions (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
-    d->actions = wnck_window_get_actions (win);
+    d->actions = matewnck_window_get_actions (win);
 }
 
 static void
@@ -3266,17 +3266,17 @@ calc_button_size (decor_t *d)
 
     button_width = 0;
 
-    if (d->actions & WNCK_WINDOW_ACTION_CLOSE)
+    if (d->actions & MATEWNCK_WINDOW_ACTION_CLOSE)
 	button_width += 17;
 
-    if (d->actions & (WNCK_WINDOW_ACTION_MAXIMIZE_HORIZONTALLY   |
-		      WNCK_WINDOW_ACTION_MAXIMIZE_VERTICALLY     |
-		      WNCK_WINDOW_ACTION_UNMAXIMIZE_HORIZONTALLY |
-		      WNCK_WINDOW_ACTION_UNMAXIMIZE_VERTICALLY))
+    if (d->actions & (MATEWNCK_WINDOW_ACTION_MAXIMIZE_HORIZONTALLY   |
+		      MATEWNCK_WINDOW_ACTION_MAXIMIZE_VERTICALLY     |
+		      MATEWNCK_WINDOW_ACTION_UNMAXIMIZE_HORIZONTALLY |
+		      MATEWNCK_WINDOW_ACTION_UNMAXIMIZE_VERTICALLY))
 	button_width += 17;
 
-    if (d->actions & (WNCK_WINDOW_ACTION_MINIMIZE |
-		      WNCK_WINDOW_ACTION_MINIMIZE))
+    if (d->actions & (MATEWNCK_WINDOW_ACTION_MINIMIZE |
+		      MATEWNCK_WINDOW_ACTION_MINIMIZE))
 	button_width += 17;
 
     if (button_width)
@@ -3336,9 +3336,9 @@ meta_calc_button_size (decor_t *d)
     for (i = 0; i < 3; i++)
     {
 	static guint button_actions[3] = {
-	    WNCK_WINDOW_ACTION_CLOSE,
-	    WNCK_WINDOW_ACTION_MAXIMIZE,
-	    WNCK_WINDOW_ACTION_MINIMIZE
+	    MATEWNCK_WINDOW_ACTION_CLOSE,
+	    MATEWNCK_WINDOW_ACTION_MAXIMIZE,
+	    MATEWNCK_WINDOW_ACTION_MINIMIZE
 	};
 
 	if (d->actions & button_actions[i])
@@ -3404,7 +3404,7 @@ meta_calc_decoration_size (decor_t *d,
 #endif
 
 static gboolean
-update_window_decoration_size (WnckWindow *win)
+update_window_decoration_size (MatewnckWindow *win)
 {
     decor_t   *d = g_object_get_data (G_OBJECT (win), "decor");
     GdkPixmap *pixmap, *buffer_pixmap = NULL;
@@ -3415,7 +3415,7 @@ update_window_decoration_size (WnckWindo
 
     xdisplay = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
 
-    wnck_window_get_client_window_geometry (win, NULL, NULL, &w, &h);
+    matewnck_window_get_client_window_geometry (win, NULL, NULL, &w, &h);
 
     name_width = max_window_name_width (win);
 
@@ -3460,7 +3460,7 @@ update_window_decoration_size (WnckWindo
     d->width  = width;
     d->height = height;
 
-    d->prop_xid = wnck_window_get_xid (win);
+    d->prop_xid = matewnck_window_get_xid (win);
 
     update_window_decoration_name (win);
 
@@ -3470,18 +3470,18 @@ update_window_decoration_size (WnckWindo
 }
 
 static void
-add_frame_window (WnckWindow *win,
+add_frame_window (MatewnckWindow *win,
 		  Window     frame)
 {
     Display		 *xdisplay;
     XSetWindowAttributes attr;
-    gulong		 xid = wnck_window_get_xid (win);
+    gulong		 xid = matewnck_window_get_xid (win);
     decor_t		 *d = g_object_get_data (G_OBJECT (win), "decor");
     gint		 i, j;
 
     xdisplay = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
 
-    d->active = wnck_window_is_active (win);
+    d->active = matewnck_window_is_active (win);
 
     attr.event_mask = ButtonPressMask | EnterWindowMask | LeaveWindowMask;
     attr.override_redirect = TRUE;
@@ -3550,18 +3550,18 @@ add_frame_window (WnckWindow *win,
 }
 
 static gboolean
-update_switcher_window (WnckWindow *win,
+update_switcher_window (MatewnckWindow *win,
 			Window     selected)
 {
     decor_t    *d = g_object_get_data (G_OBJECT (win), "decor");
     GdkPixmap  *pixmap, *buffer_pixmap = NULL;
     gint       height, width = 0;
-    WnckWindow *selected_win;
+    MatewnckWindow *selected_win;
     Display    *xdisplay;
 
     xdisplay = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
 
-    wnck_window_get_client_window_geometry (win, NULL, NULL, &width, NULL);
+    matewnck_window_get_client_window_geometry (win, NULL, NULL, &width, NULL);
 
     decor_get_default_layout (&switcher_context, width, 1, &d->border_layout);
 
@@ -3590,7 +3590,7 @@ update_switcher_window (WnckWindow *win,
     if (!d->height)
 	d->height = switcher_height;
 
-    selected_win = wnck_window_get (selected);
+    selected_win = matewnck_window_get (selected);
     if (selected_win)
     {
 	glong		name_length;
@@ -3603,7 +3603,7 @@ update_switcher_window (WnckWindow *win,
 	    d->name = NULL;
 	}
 
-	name = wnck_window_get_name (selected_win);
+	name = matewnck_window_get_name (selected_win);
 	if (name && (name_length = strlen (name)))
 	{
 	    if (!d->layout)
@@ -3721,7 +3721,7 @@ update_switcher_window (WnckWindow *win,
     d->width  = width;
     d->height = height;
 
-    d->prop_xid = wnck_window_get_xid (win);
+    d->prop_xid = matewnck_window_get_xid (win);
 
     queue_decor_draw (d);
 
@@ -3729,7 +3729,7 @@ update_switcher_window (WnckWindow *win,
 }
 
 static void
-remove_frame_window (WnckWindow *win)
+remove_frame_window (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
     Display *xdisplay;
@@ -3813,7 +3813,7 @@ remove_frame_window (WnckWindow *win)
 }
 
 static void
-window_name_changed (WnckWindow *win)
+window_name_changed (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -3825,7 +3825,7 @@ window_name_changed (WnckWindow *win)
 }
 
 static void
-window_geometry_changed (WnckWindow *win)
+window_geometry_changed (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -3833,7 +3833,7 @@ window_geometry_changed (WnckWindow *win
     {
 	int width, height;
 
-	wnck_window_get_client_window_geometry (win, NULL, NULL, &width,
+	matewnck_window_get_client_window_geometry (win, NULL, NULL, &width,
 						&height);
 
 	if (width != d->client_width || height != d->client_height)
@@ -3848,7 +3848,7 @@ window_geometry_changed (WnckWindow *win
 }
 
 static void
-window_icon_changed (WnckWindow *win)
+window_icon_changed (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -3860,7 +3860,7 @@ window_icon_changed (WnckWindow *win)
 }
 
 static void
-window_state_changed (WnckWindow *win)
+window_state_changed (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -3875,7 +3875,7 @@ window_state_changed (WnckWindow *win)
 }
 
 static void
-window_actions_changed (WnckWindow *win)
+window_actions_changed (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -3890,7 +3890,7 @@ window_actions_changed (WnckWindow *win)
 }
 
 static void
-connect_window (WnckWindow *win)
+connect_window (MatewnckWindow *win)
 {
     g_signal_connect_object (win, "name_changed",
 			     G_CALLBACK (window_name_changed),
@@ -3910,37 +3910,37 @@ connect_window (WnckWindow *win)
 }
 
 static void
-active_window_changed (WnckScreen *screen)
+active_window_changed (MatewnckScreen *screen)
 {
-    WnckWindow *win;
+    MatewnckWindow *win;
     decor_t    *d;
 
-    win = wnck_screen_get_previously_active_window (screen);
+    win = matewnck_screen_get_previously_active_window (screen);
     if (win)
     {
 	d = g_object_get_data (G_OBJECT (win), "decor");
 	if (d && d->pixmap)
 	{
-	    d->active = wnck_window_is_active (win);
+	    d->active = matewnck_window_is_active (win);
 	    queue_decor_draw (d);
 	}
     }
 
-    win = wnck_screen_get_active_window (screen);
+    win = matewnck_screen_get_active_window (screen);
     if (win)
     {
 	d = g_object_get_data (G_OBJECT (win), "decor");
 	if (d && d->pixmap)
 	{
-	    d->active = wnck_window_is_active (win);
+	    d->active = matewnck_window_is_active (win);
 	    queue_decor_draw (d);
 	}
     }
 }
 
 static void
-window_opened (WnckScreen *screen,
-	       WnckWindow *win)
+window_opened (MatewnckScreen *screen,
+	       MatewnckWindow *win)
 {
     decor_t *d;
     Window  window;
@@ -3950,7 +3950,7 @@ window_opened (WnckScreen *screen,
     if (!d)
 	return;
 
-    wnck_window_get_client_window_geometry (win, NULL, NULL,
+    matewnck_window_get_client_window_geometry (win, NULL, NULL,
 					    &d->client_width,
 					    &d->client_height);
 
@@ -3960,11 +3960,11 @@ window_opened (WnckScreen *screen,
 
     connect_window (win);
 
-    xid = wnck_window_get_xid (win);
+    xid = matewnck_window_get_xid (win);
 
     if (get_window_prop (xid, select_window_atom, &window))
     {
-	d->prop_xid = wnck_window_get_xid (win);
+	d->prop_xid = matewnck_window_get_xid (win);
 	update_switcher_window (win, window);
     }
     else if (get_window_prop (xid, frame_window_atom, &window))
@@ -3974,8 +3974,8 @@ window_opened (WnckScreen *screen,
 }
 
 static void
-window_closed (WnckScreen *screen,
-	       WnckWindow *win)
+window_closed (MatewnckScreen *screen,
+	       MatewnckWindow *win)
 {
     Display *xdisplay = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -3985,7 +3985,7 @@ window_closed (WnckScreen *screen,
     g_object_set_data (G_OBJECT (win), "decor", NULL);
 
     gdk_error_trap_push ();
-    XDeleteProperty (xdisplay, wnck_window_get_xid (win), win_decor_atom);
+    XDeleteProperty (xdisplay, matewnck_window_get_xid (win), win_decor_atom);
     gdk_display_sync (gdk_display_get_default ());
     gdk_error_trap_pop ();
 
@@ -3993,7 +3993,7 @@ window_closed (WnckScreen *screen,
 }
 
 static void
-connect_screen (WnckScreen *screen)
+connect_screen (MatewnckScreen *screen)
 {
     GList *windows;
 
@@ -4007,7 +4007,7 @@ connect_screen (WnckScreen *screen)
 			     G_CALLBACK (window_closed),
 			     0, 0);
 
-    windows = wnck_screen_get_windows (screen);
+    windows = matewnck_screen_get_windows (screen);
     while (windows != NULL)
     {
 	window_opened (screen, windows->data);
@@ -4016,7 +4016,7 @@ connect_screen (WnckScreen *screen)
 }
 
 static void
-move_resize_window (WnckWindow *win,
+move_resize_window (MatewnckWindow *win,
 		    int	       direction,
 		    XEvent     *xevent)
 {
@@ -4045,7 +4045,7 @@ move_resize_window (WnckWindow *win,
     ev.xclient.serial	  = 0;
     ev.xclient.send_event = TRUE;
 
-    ev.xclient.window	    = wnck_window_get_xid (win);
+    ev.xclient.window	    = matewnck_window_get_xid (win);
     ev.xclient.message_type = wm_move_resize_atom;
     ev.xclient.format	    = 32;
 
@@ -4066,7 +4066,7 @@ move_resize_window (WnckWindow *win,
 }
 
 static void
-restack_window (WnckWindow *win,
+restack_window (MatewnckWindow *win,
 		int	   stack_mode)
 {
     Display    *xdisplay;
@@ -4094,7 +4094,7 @@ restack_window (WnckWindow *win,
     ev.xclient.serial	  = 0;
     ev.xclient.send_event = TRUE;
 
-    ev.xclient.window	    = wnck_window_get_xid (win);
+    ev.xclient.window	    = matewnck_window_get_xid (win);
     ev.xclient.message_type = restack_window_atom;
     ev.xclient.format	    = 32;
 
@@ -4267,7 +4267,7 @@ create_tooltip_window (void)
 }
 
 static void
-handle_tooltip_event (WnckWindow *win,
+handle_tooltip_event (MatewnckWindow *win,
 		      XEvent     *xevent,
 		      guint	 state,
 		      const char *tip)
@@ -4281,7 +4281,7 @@ handle_tooltip_event (WnckWindow *win,
     case EnterNotify:
 	if (!(state & PRESSED_EVENT_WINDOW))
 	{
-	    if (wnck_window_is_active (win))
+	    if (matewnck_window_is_active (win))
 		tooltip_start_delay (tip);
 	}
 	break;
@@ -4292,7 +4292,7 @@ handle_tooltip_event (WnckWindow *win,
 }
 
 static void
-common_button_event (WnckWindow *win,
+common_button_event (MatewnckWindow *win,
 		     XEvent     *xevent,
 		     int	button,
 		     int	max,
@@ -4327,7 +4327,7 @@ common_button_event (WnckWindow *win,
 #define BUTTON_EVENT_ACTION_STATE (PRESSED_EVENT_WINDOW | IN_EVENT_WINDOW)
 
 static void
-close_button_event (WnckWindow *win,
+close_button_event (MatewnckWindow *win,
 		    XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -4340,20 +4340,20 @@ close_button_event (WnckWindow *win,
 	if (xevent->xbutton.button == 1)
 	{
 	    if (state == BUTTON_EVENT_ACTION_STATE)
-		wnck_window_close (win, xevent->xbutton.time);
+		matewnck_window_close (win, xevent->xbutton.time);
 	}
 	break;
     }
 }
 
 static void
-max_button_event (WnckWindow *win,
+max_button_event (MatewnckWindow *win,
 		  XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
     guint   state = d->button_states[BUTTON_MAX];
 
-    if (wnck_window_is_maximized (win))
+    if (matewnck_window_is_maximized (win))
 	common_button_event (win, xevent, BUTTON_MAX,
 			     3, _("Unmaximize Window"));
     else
@@ -4368,24 +4368,24 @@ max_button_event (WnckWindow *win,
 	    {
 		if (xevent->xbutton.button == 2)
 		{
-		    if (wnck_window_is_maximized_vertically (win))
-			wnck_window_unmaximize_vertically (win);
+		    if (matewnck_window_is_maximized_vertically (win))
+			matewnck_window_unmaximize_vertically (win);
 		    else
-			wnck_window_maximize_vertically (win);
+			matewnck_window_maximize_vertically (win);
 		}
 		else if (xevent->xbutton.button == 3)
 		{
-		    if (wnck_window_is_maximized_horizontally (win))
-			wnck_window_unmaximize_horizontally (win);
+		    if (matewnck_window_is_maximized_horizontally (win))
+			matewnck_window_unmaximize_horizontally (win);
 		    else
-			wnck_window_maximize_horizontally (win);
+			matewnck_window_maximize_horizontally (win);
 		}
 		else
 		{
-		    if (wnck_window_is_maximized (win))
-			wnck_window_unmaximize (win);
+		    if (matewnck_window_is_maximized (win))
+			matewnck_window_unmaximize (win);
 		    else
-			wnck_window_maximize (win);
+			matewnck_window_maximize (win);
 		}
 	    }
 	}
@@ -4394,7 +4394,7 @@ max_button_event (WnckWindow *win,
 }
 
 static void
-min_button_event (WnckWindow *win,
+min_button_event (MatewnckWindow *win,
 		  XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -4407,7 +4407,7 @@ min_button_event (WnckWindow *win,
 	if (xevent->xbutton.button == 1)
 	{
 	    if (state == BUTTON_EVENT_ACTION_STATE)
-		wnck_window_minimize (win);
+		matewnck_window_minimize (win);
 	}
 	break;
     }
@@ -4426,11 +4426,11 @@ position_action_menu (GtkMenu  *menu,
 		      gboolean *push_in,
 		      gpointer user_data)
 {
-    WnckWindow *win = (WnckWindow *) user_data;
+    MatewnckWindow *win = (MatewnckWindow *) user_data;
     decor_t    *d = g_object_get_data (G_OBJECT (win), "decor");
     gint       bx, by, width, height;
 
-    wnck_window_get_client_window_geometry (win, x, y, &width, &height);
+    matewnck_window_get_client_window_geometry (win, x, y, &width, &height);
 
     if ((*theme_get_button_position) (d, BUTTON_MENU, width, height,
 				      &bx, &by, &width, &height))
@@ -4448,7 +4448,7 @@ position_action_menu (GtkMenu  *menu,
 }
 
 static void
-action_menu_map (WnckWindow *win,
+action_menu_map (MatewnckWindow *win,
 		 long	     button,
 		 Time	     time)
 {
@@ -4471,27 +4471,27 @@ action_menu_map (WnckWindow *win,
 	    gtk_widget_destroy (action_menu);
     }
 
-    switch (wnck_window_get_window_type (win)) {
-    case WNCK_WINDOW_DESKTOP:
-    case WNCK_WINDOW_DOCK:
+    switch (matewnck_window_get_window_type (win)) {
+    case MATEWNCK_WINDOW_DESKTOP:
+    case MATEWNCK_WINDOW_DOCK:
 	/* don't allow window action */
 	return;
-    case WNCK_WINDOW_NORMAL:
-    case WNCK_WINDOW_DIALOG:
+    case MATEWNCK_WINDOW_NORMAL:
+    case MATEWNCK_WINDOW_DIALOG:
 
-#ifndef HAVE_LIBWNCK_2_19_4
-    case WNCK_WINDOW_MODAL_DIALOG:
+#ifndef HAVE_LIBMATEWNCK_2_19_4
+    case MATEWNCK_WINDOW_MODAL_DIALOG:
 #endif
 
-    case WNCK_WINDOW_TOOLBAR:
-    case WNCK_WINDOW_MENU:
-    case WNCK_WINDOW_UTILITY:
-    case WNCK_WINDOW_SPLASHSCREEN:
+    case MATEWNCK_WINDOW_TOOLBAR:
+    case MATEWNCK_WINDOW_MENU:
+    case MATEWNCK_WINDOW_UTILITY:
+    case MATEWNCK_WINDOW_SPLASHSCREEN:
 	/* allow window action menu */
 	break;
     }
 
-    action_menu = wnck_create_window_action_menu (win);
+    action_menu = matewnck_create_window_action_menu (win);
 
     gtk_menu_set_screen (GTK_MENU (action_menu), screen);
 
@@ -4522,7 +4522,7 @@ action_menu_map (WnckWindow *win,
 }
 
 static void
-menu_button_event (WnckWindow *win,
+menu_button_event (MatewnckWindow *win,
 		   XEvent     *xevent)
 {
     common_button_event (win, xevent, BUTTON_MENU, 1, _("Window Menu"));
@@ -4538,7 +4538,7 @@ menu_button_event (WnckWindow *win,
 }
 
 static void
-shade_button_event (WnckWindow *win,
+shade_button_event (MatewnckWindow *win,
 		    XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -4551,14 +4551,14 @@ shade_button_event (WnckWindow *win,
 	if (xevent->xbutton.button == 1)
 	{
 	    if (state == BUTTON_EVENT_ACTION_STATE)
-		wnck_window_shade (win);
+		matewnck_window_shade (win);
 	}
 	break;
     }
 }
 
 static void
-above_button_event (WnckWindow *win,
+above_button_event (MatewnckWindow *win,
 		    XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -4573,8 +4573,8 @@ above_button_event (WnckWindow *win,
 	    if (state == BUTTON_EVENT_ACTION_STATE)
 	    {
 
-#ifdef HAVE_LIBWNCK_2_18_1
-		wnck_window_make_above (win);
+#ifdef HAVE_LIBMATEWNCK_2_18_1
+		matewnck_window_make_above (win);
 #endif
 
 	    }
@@ -4584,7 +4584,7 @@ above_button_event (WnckWindow *win,
 }
 
 static void
-stick_button_event (WnckWindow *win,
+stick_button_event (MatewnckWindow *win,
 		    XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -4597,14 +4597,14 @@ stick_button_event (WnckWindow *win,
 	if (xevent->xbutton.button == 1)
 	{
 	    if (state == BUTTON_EVENT_ACTION_STATE)
-		wnck_window_stick (win);
+		matewnck_window_stick (win);
 	}
 	break;
     }
 }
 
 static void
-unshade_button_event (WnckWindow *win,
+unshade_button_event (MatewnckWindow *win,
 		      XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -4617,14 +4617,14 @@ unshade_button_event (WnckWindow *win,
 	if (xevent->xbutton.button == 1)
 	{
 	    if (state == BUTTON_EVENT_ACTION_STATE)
-		wnck_window_unshade (win);
+		matewnck_window_unshade (win);
 	}
 	break;
     }
 }
 
 static void
-unabove_button_event (WnckWindow *win,
+unabove_button_event (MatewnckWindow *win,
 		      XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -4639,8 +4639,8 @@ unabove_button_event (WnckWindow *win,
 	    if (state == BUTTON_EVENT_ACTION_STATE)
 	    {
 
-#ifdef HAVE_LIBWNCK_2_18_1
-		wnck_window_unmake_above (win);
+#ifdef HAVE_LIBMATEWNCK_2_18_1
+		matewnck_window_unmake_above (win);
 #endif
 
 	    }
@@ -4650,7 +4650,7 @@ unabove_button_event (WnckWindow *win,
 }
 
 static void
-unstick_button_event (WnckWindow *win,
+unstick_button_event (MatewnckWindow *win,
 		      XEvent     *xevent)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -4663,45 +4663,45 @@ unstick_button_event (WnckWindow *win,
 	if (xevent->xbutton.button == 1)
 	{
 	    if (state == BUTTON_EVENT_ACTION_STATE)
-		wnck_window_unstick (win);
+		matewnck_window_unstick (win);
 	}
 	break;
     }
 }
 
 static void
-handle_title_button_event (WnckWindow   *win,
+handle_title_button_event (MatewnckWindow   *win,
 			   int          action,
 			   XButtonEvent *event)
 {
     switch (action) {
     case CLICK_ACTION_SHADE:
-	if (wnck_window_is_shaded (win))
-	    wnck_window_unshade (win);
+	if (matewnck_window_is_shaded (win))
+	    matewnck_window_unshade (win);
 	else
-	    wnck_window_shade (win);
+	    matewnck_window_shade (win);
 	break;
     case CLICK_ACTION_MAXIMIZE:
-	if (wnck_window_is_maximized (win))
-	    wnck_window_unmaximize (win);
+	if (matewnck_window_is_maximized (win))
+	    matewnck_window_unmaximize (win);
 	else
-	    wnck_window_maximize (win);
+	    matewnck_window_maximize (win);
 	break;
     case CLICK_ACTION_MAXIMIZE_HORZ:
-	if (wnck_window_is_maximized_horizontally (win))
-	    wnck_window_unmaximize_horizontally (win);
+	if (matewnck_window_is_maximized_horizontally (win))
+	    matewnck_window_unmaximize_horizontally (win);
 	else
-	    wnck_window_maximize_horizontally (win);
+	    matewnck_window_maximize_horizontally (win);
 	break;
     case CLICK_ACTION_MAXIMIZE_VERT:
-	if (wnck_window_is_maximized_vertically (win))
-	    wnck_window_unmaximize_vertically (win);
+	if (matewnck_window_is_maximized_vertically (win))
+	    matewnck_window_unmaximize_vertically (win);
 	else
-	    wnck_window_maximize_vertically (win);
+	    matewnck_window_maximize_vertically (win);
 	break;
     case CLICK_ACTION_MINIMIZE:
-	if (!wnck_window_is_minimized (win))
-	    wnck_window_minimize (win);
+	if (!matewnck_window_is_minimized (win))
+	    matewnck_window_minimize (win);
 	break;
     case CLICK_ACTION_RAISE:
 	restack_window (win, Above);
@@ -4716,20 +4716,20 @@ handle_title_button_event (WnckWindow
 }
 
 static void
-handle_mouse_wheel_title_event (WnckWindow   *win,
+handle_mouse_wheel_title_event (MatewnckWindow   *win,
 				unsigned int button)
 {
     switch (wheel_action) {
     case WHEEL_ACTION_SHADE:
 	if (button == 4)
 	{
-	    if (!wnck_window_is_shaded (win))
-		wnck_window_shade (win);
+	    if (!matewnck_window_is_shaded (win))
+		matewnck_window_shade (win);
 	}
 	else if (button == 5)
 	{
-	    if (wnck_window_is_shaded (win))
-		wnck_window_unshade (win);
+	    if (matewnck_window_is_shaded (win))
+		matewnck_window_unshade (win);
 	}
 	break;
     default:
@@ -4751,7 +4751,7 @@ dist (double x1, double y1,
 }
 
 static void
-title_event (WnckWindow *win,
+title_event (MatewnckWindow *win,
 	     XEvent     *xevent)
 {
     static int	  last_button_num = 0;
@@ -4811,7 +4811,7 @@ title_event (WnckWindow *win,
 }
 
 static void
-frame_common_event (WnckWindow *win,
+frame_common_event (MatewnckWindow *win,
 		    int        direction,
 		    XEvent     *xevent)
 {
@@ -4835,56 +4835,56 @@ frame_common_event (WnckWindow *win,
 }
 
 static void
-top_left_event (WnckWindow *win,
+top_left_event (MatewnckWindow *win,
 		XEvent     *xevent)
 {
     frame_common_event (win, WM_MOVERESIZE_SIZE_TOPLEFT, xevent);
 }
 
 static void
-top_event (WnckWindow *win,
+top_event (MatewnckWindow *win,
 	   XEvent     *xevent)
 {
     frame_common_event (win, WM_MOVERESIZE_SIZE_TOP, xevent);
 }
 
 static void
-top_right_event (WnckWindow *win,
+top_right_event (MatewnckWindow *win,
 		 XEvent     *xevent)
 {
     frame_common_event (win, WM_MOVERESIZE_SIZE_TOPRIGHT, xevent);
 }
 
 static void
-left_event (WnckWindow *win,
+left_event (MatewnckWindow *win,
 	    XEvent     *xevent)
 {
     frame_common_event (win, WM_MOVERESIZE_SIZE_LEFT, xevent);
 }
 
 static void
-right_event (WnckWindow *win,
+right_event (MatewnckWindow *win,
 	     XEvent     *xevent)
 {
     frame_common_event (win, WM_MOVERESIZE_SIZE_RIGHT, xevent);
 }
 
 static void
-bottom_left_event (WnckWindow *win,
+bottom_left_event (MatewnckWindow *win,
 		   XEvent     *xevent)
 {
     frame_common_event (win, WM_MOVERESIZE_SIZE_BOTTOMLEFT, xevent);
 }
 
 static void
-bottom_event (WnckWindow *win,
+bottom_event (MatewnckWindow *win,
 	      XEvent     *xevent)
 {
     frame_common_event (win, WM_MOVERESIZE_SIZE_BOTTOM, xevent);
 }
 
 static void
-bottom_right_event (WnckWindow *win,
+bottom_right_event (MatewnckWindow *win,
 		    XEvent     *xevent)
 {
     frame_common_event (win, WM_MOVERESIZE_SIZE_BOTTOMRIGHT, xevent);
@@ -4894,12 +4894,12 @@ static void
 force_quit_dialog_realize (GtkWidget *dialog,
 			   void      *data)
 {
-    WnckWindow *win = data;
+    MatewnckWindow *win = data;
 
     gdk_error_trap_push ();
     XSetTransientForHint (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
 			  GDK_WINDOW_XID (dialog->window),
-			  wnck_window_get_xid (win));
+			  matewnck_window_get_xid (win));
     gdk_display_sync (gdk_display_get_default ());
     gdk_error_trap_pop ();
 }
@@ -4943,20 +4943,20 @@ get_client_machine (Window xwindow)
 }
 
 static void
-kill_window (WnckWindow *win)
+kill_window (MatewnckWindow *win)
 {
     GdkDisplay      *gdk_display = gdk_display_get_default ();
     Display         *xdisplay    = GDK_DISPLAY_XDISPLAY (gdk_display);
-    WnckApplication *app;
+    MatewnckApplication *app;
 
-    app = wnck_window_get_application (win);
+    app = matewnck_window_get_application (win);
     if (app)
     {
 	gchar buf[257], *client_machine;
 	int   pid;
 
-	pid = wnck_application_get_pid (app);
-	client_machine = get_client_machine (wnck_application_get_xid (app));
+	pid = matewnck_application_get_pid (app);
+	client_machine = get_client_machine (matewnck_application_get_xid (app));
 
 	if (client_machine && pid > 0)
 	{
@@ -4972,7 +4972,7 @@ kill_window (WnckWindow *win)
     }
 
     gdk_error_trap_push ();
-    XKillClient (xdisplay, wnck_window_get_xid (win));
+    XKillClient (xdisplay, matewnck_window_get_xid (win));
     gdk_display_sync (gdk_display);
     gdk_error_trap_pop ();
 }
@@ -4982,7 +4982,7 @@ force_quit_dialog_response (GtkWidget *d
 			    gint      response,
 			    void      *data)
 {
-    WnckWindow *win = data;
+    MatewnckWindow *win = data;
     decor_t    *d = g_object_get_data (G_OBJECT (win), "decor");
 
     if (response == GTK_RESPONSE_ACCEPT)
@@ -4996,7 +4996,7 @@ force_quit_dialog_response (GtkWidget *d
 }
 
 static void
-show_force_quit_dialog (WnckWindow *win,
+show_force_quit_dialog (MatewnckWindow *win,
 			Time        timestamp)
 {
     decor_t   *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -5006,7 +5006,7 @@ show_force_quit_dialog (WnckWindow *win,
     if (d->force_quit_dialog)
 	return;
 
-    tmp = g_markup_escape_text (wnck_window_get_name (win), -1);
+    tmp = g_markup_escape_text (matewnck_window_get_name (win), -1);
     str = g_strdup_printf (_("The window \"%s\" is not responding."), tmp);
 
     g_free (tmp);
@@ -5057,7 +5057,7 @@ show_force_quit_dialog (WnckWindow *win,
 }
 
 static void
-hide_force_quit_dialog (WnckWindow *win)
+hide_force_quit_dialog (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -5102,11 +5102,11 @@ event_filter_func (GdkXEvent *gdkxevent,
     case PropertyNotify:
 	if (xevent->xproperty.atom == frame_window_atom)
 	{
-	    WnckWindow *win;
+	    MatewnckWindow *win;
 
 	    xid = xevent->xproperty.window;
 
-	    win = wnck_window_get (xid);
+	    win = matewnck_window_get (xid);
 	    if (win)
 	    {
 		Window frame, window;
@@ -5122,11 +5122,11 @@ event_filter_func (GdkXEvent *gdkxevent,
 	}
 	else if (xevent->xproperty.atom == mwm_hints_atom)
 	{
-	    WnckWindow *win;
+	    MatewnckWindow *win;
 
 	    xid = xevent->xproperty.window;
 
-	    win = wnck_window_get (xid);
+	    win = matewnck_window_get (xid);
 	    if (win)
 	    {
 		decor_t  *d = g_object_get_data (G_OBJECT (win), "decor");
@@ -5158,11 +5158,11 @@ event_filter_func (GdkXEvent *gdkxevent,
 	}
 	else if (xevent->xproperty.atom == select_window_atom)
 	{
-	    WnckWindow *win;
+	    MatewnckWindow *win;
 
 	    xid = xevent->xproperty.window;
 
-	    win = wnck_window_get (xid);
+	    win = matewnck_window_get (xid);
 	    if (win)
 	    {
 		Window select;
@@ -5184,9 +5184,9 @@ event_filter_func (GdkXEvent *gdkxevent,
 	    action = xevent->xclient.data.l[0];
 	    if (action == toolkit_action_window_menu_atom)
 	    {
-		WnckWindow *win;
+		MatewnckWindow *win;
 
-		win = wnck_window_get (xevent->xclient.window);
+		win = matewnck_window_get (xevent->xclient.window);
 		if (win)
 		{
 		    action_menu_map (win,
@@ -5196,9 +5196,9 @@ event_filter_func (GdkXEvent *gdkxevent,
 	    }
 	    else if (action == toolkit_action_force_quit_dialog_atom)
 	    {
-		WnckWindow *win;
+		MatewnckWindow *win;
 
-		win = wnck_window_get (xevent->xclient.window);
+		win = matewnck_window_get (xevent->xclient.window);
 		if (win)
 		{
 		    if (xevent->xclient.data.l[2])
@@ -5215,9 +5215,9 @@ event_filter_func (GdkXEvent *gdkxevent,
 
     if (xid)
     {
-	WnckWindow *win;
+	MatewnckWindow *win;
 
-	win = wnck_window_get (xid);
+	win = matewnck_window_get (xid);
 	if (win)
 	{
 	    static event_callback callback[3][3] = {
@@ -5526,8 +5526,8 @@ draw_border_shape (Display	   *xdisplay,
     /* we use closure argument if maximized */
     if (closure)
 	d.state |=
-	    WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY |
-	    WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY;
+	    MATEWNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY |
+	    MATEWNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY;
 
     decor_get_default_layout (c, 1, 1, &d.border_layout);
 
@@ -5668,7 +5668,7 @@ update_shadow (void)
 }
 
 static void
-update_window_decoration (WnckWindow *win)
+update_window_decoration (MatewnckWindow *win)
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -5683,7 +5683,7 @@ update_window_decoration (WnckWindow *wi
     }
     else
     {
-	Window xid = wnck_window_get_xid (win);
+	Window xid = matewnck_window_get_xid (win);
 	Window select;
 
 	if (get_window_prop (xid, select_window_atom, &select))
@@ -6083,7 +6083,7 @@ update_titlebar_font (void)
 }
 
 static void
-decorations_changed (WnckScreen *screen)
+decorations_changed (MatewnckScreen *screen)
 {
     GdkDisplay *gdkdisplay;
     GdkScreen  *gdkscreen;
@@ -6101,7 +6101,7 @@ decorations_changed (WnckScreen *screen)
     if (minimal)
 	return;
 
-    windows = wnck_screen_get_windows (screen);
+    windows = matewnck_screen_get_windows (screen);
     while (windows != NULL)
     {
 	decor_t *d = g_object_get_data (G_OBJECT (windows->data), "decor");
@@ -6117,7 +6117,7 @@ decorations_changed (WnckScreen *screen)
 
 	}
 
-	update_window_decoration (WNCK_WINDOW (windows->data));
+	update_window_decoration (MATEWNCK_WINDOW (windows->data));
 	windows = windows->next;
     }
 }
@@ -6127,11 +6127,11 @@ style_changed (GtkWidget *widget)
 {
     GdkDisplay *gdkdisplay;
     GdkScreen  *gdkscreen;
-    WnckScreen *screen;
+    MatewnckScreen *screen;
 
     gdkdisplay = gdk_display_get_default ();
     gdkscreen  = gdk_display_get_default_screen (gdkdisplay);
-    screen     = wnck_screen_get_default ();
+    screen     = matewnck_screen_get_default ();
 
     update_style (widget);
 
@@ -6542,7 +6542,7 @@ dbus_handle_message (DBusConnection *con
 		     DBusMessage    *message,
 		     void           *user_data)
 {
-    WnckScreen	      *screen = user_data;
+    MatewnckScreen	      *screen = user_data;
     char	      **path;
     const char        *interface, *member;
     DBusHandlerResult result = DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
@@ -6670,7 +6670,7 @@ send_and_block_for_shadow_option_reply (
 #endif
 
 static gboolean
-init_settings (WnckScreen *screen)
+init_settings (MatewnckScreen *screen)
 {
     GtkSettings	   *settings;
     GdkScreen	   *gdkscreen;
@@ -6877,7 +6877,7 @@ main (int argc, char *argv[])
     GdkDisplay *gdkdisplay;
     Display    *xdisplay;
     GdkScreen  *gdkscreen;
-    WnckScreen *screen;
+    MatewnckScreen *screen;
     gint       i, j, status;
     gboolean   replace = FALSE;
 
@@ -7075,8 +7075,8 @@ main (int argc, char *argv[])
 	return 1;
     }
 
-    screen = wnck_screen_get_default ();
-    wnck_set_client_type (WNCK_CLIENT_TYPE_PAGER);
+    screen = matewnck_screen_get_default ();
+    matewnck_set_client_type (MATEWNCK_CLIENT_TYPE_PAGER);
 
     gdk_window_add_filter (NULL,
 			   selection_event_filter_func,
